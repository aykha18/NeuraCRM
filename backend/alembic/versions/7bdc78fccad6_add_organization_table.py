"""add_organization_table

Revision ID: 7bdc78fccad6
Revises: 4eab272f264b
Create Date: 2025-09-13 17:55:40.091262

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7bdc78fccad6'
down_revision: Union[str, Sequence[str], None] = '4eab272f264b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create organizations table first
    op.create_table('organizations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('domain', sa.String(), nullable=True),
    sa.Column('settings', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('domain')
    )
    
    # Create a default organization for existing data
    op.execute("INSERT INTO organizations (id, name, created_at) VALUES (1, 'Default Organization', NOW())")
    
    # Add organization_id columns as nullable first
    op.add_column('contacts', sa.Column('organization_id', sa.Integer(), nullable=True))
    op.add_column('leads', sa.Column('organization_id', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('organization_id', sa.Integer(), nullable=True))
    
    # Update existing records to use default organization
    op.execute("UPDATE contacts SET organization_id = 1 WHERE organization_id IS NULL")
    op.execute("UPDATE leads SET organization_id = 1 WHERE organization_id IS NULL")
    op.execute("UPDATE users SET organization_id = 1 WHERE organization_id IS NULL")
    
    # Now make the columns NOT NULL
    op.alter_column('contacts', 'organization_id', nullable=False)
    op.alter_column('leads', 'organization_id', nullable=False)
    op.alter_column('users', 'organization_id', nullable=False)
    
    # Add foreign key constraints
    op.create_foreign_key('fk_contacts_organization', 'contacts', 'organizations', ['organization_id'], ['id'])
    op.create_foreign_key('fk_leads_organization', 'leads', 'organizations', ['organization_id'], ['id'])
    op.create_foreign_key('fk_users_organization', 'users', 'organizations', ['organization_id'], ['id'])
    
    # Remove unique constraint on email (now unique per organization)
    op.drop_constraint('users_email_key', 'users', type_='unique')
    
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.drop_column('users', 'organization_id')
    op.drop_constraint(None, 'leads', type_='foreignkey')
    op.drop_column('leads', 'organization_id')
    op.drop_constraint(None, 'contacts', type_='foreignkey')
    op.drop_column('contacts', 'organization_id')
    op.drop_table('organizations')
    # ### end Alembic commands ###
