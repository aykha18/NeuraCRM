"""add_ai_summary_fields_to_support_tickets

Revision ID: aa6b98b2a150
Revises: 0411a2a17f98
Create Date: 2025-10-02 20:39:35.974709

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'aa6b98b2a150'
down_revision: Union[str, Sequence[str], None] = '0411a2a17f98'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('nurturing_steps')
    op.drop_table('tasks')
    op.drop_table('approval_requests')
    op.drop_table('lead_campaign_enrollments')
    op.drop_table('support_agents')
    op.drop_table('lead_assignment_rules')
    op.drop_table('task_templates')
    op.drop_table('approval_workflows')
    op.drop_table('approval_steps')
    op.drop_table('lead_nurturing_campaigns')
    op.alter_column('call_records', 'direction',
               existing_type=sa.VARCHAR(),
               nullable=True,
               existing_server_default=sa.text("'outbound'::character varying"))
    op.alter_column('call_records', 'status',
               existing_type=sa.VARCHAR(),
               nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('call_records', 'cost',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True,
               existing_server_default=sa.text("'0'::double precision"))
    op.alter_column('call_records', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('call_records', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.add_column('payments', sa.Column('contact_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'payments', 'contacts', ['contact_id'], ['id'])
    op.drop_column('pbx_providers', 'context')
    op.add_column('support_tickets', sa.Column('ai_summary', sa.Text(), nullable=True))
    op.add_column('support_tickets', sa.Column('ai_summary_generated_at', sa.DateTime(), nullable=True))
    op.add_column('support_tickets', sa.Column('ai_summary_model', sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('support_tickets', 'ai_summary_model')
    op.drop_column('support_tickets', 'ai_summary_generated_at')
    op.drop_column('support_tickets', 'ai_summary')
    op.add_column('pbx_providers', sa.Column('context', sa.VARCHAR(length=100), server_default=sa.text("'default'::character varying"), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'payments', type_='foreignkey')
    op.drop_column('payments', 'contact_id')
    op.alter_column('call_records', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('call_records', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('call_records', 'cost',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False,
               existing_server_default=sa.text("'0'::double precision"))
    op.alter_column('call_records', 'status',
               existing_type=sa.VARCHAR(),
               nullable=False,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('call_records', 'direction',
               existing_type=sa.VARCHAR(),
               nullable=False,
               existing_server_default=sa.text("'outbound'::character varying"))
    op.create_table('lead_nurturing_campaigns',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('lead_nurturing_campaigns_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('campaign_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('campaign_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('campaign_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('target_segment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='lead_nurturing_campaigns_created_by_fkey'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='lead_nurturing_campaigns_organization_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='lead_nurturing_campaigns_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('approval_steps',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('approval_request_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('step_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('approver_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('comments', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['approval_request_id'], ['approval_requests.id'], name='approval_steps_approval_request_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['approver_id'], ['users.id'], name='approval_steps_approver_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='approval_steps_pkey')
    )
    op.create_table('approval_workflows',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('approval_workflows_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('workflow_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('workflow_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('trigger_conditions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('approval_steps', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('auto_approve_conditions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='approval_workflows_created_by_fkey'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='approval_workflows_organization_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='approval_workflows_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('task_templates',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('task_templates_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description_template', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('trigger_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('trigger_conditions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('due_date_offset', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('due_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('assign_to_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('assign_to_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['assign_to_user_id'], ['users.id'], name='task_templates_assign_to_user_id_fkey'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='task_templates_created_by_fkey'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='task_templates_organization_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='task_templates_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('lead_assignment_rules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('conditions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('assignment_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('assigned_user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('assignment_priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['assigned_user_id'], ['users.id'], name='lead_assignment_rules_assigned_user_id_fkey'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='lead_assignment_rules_created_by_fkey'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='lead_assignment_rules_organization_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='lead_assignment_rules_pkey')
    )
    op.create_table('support_agents',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('support_agents_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('skills', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('workload', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('max_tickets', sa.INTEGER(), server_default=sa.text('10'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='support_agents_organization_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='support_agents_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='support_agents_pkey')
    )
    op.create_table('lead_campaign_enrollments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('lead_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('campaign_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('enrollment_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('current_step', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('enrolled_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_activity', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['campaign_id'], ['lead_nurturing_campaigns.id'], name='lead_campaign_enrollments_campaign_id_fkey'),
    sa.ForeignKeyConstraint(['lead_id'], ['leads.id'], name='lead_campaign_enrollments_lead_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='lead_campaign_enrollments_pkey')
    )
    op.create_table('approval_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('workflow_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('request_reason', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('request_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True),
    sa.Column('current_step', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('total_steps', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('requested_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('requested_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completion_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='approval_requests_organization_id_fkey'),
    sa.ForeignKeyConstraint(['requested_by'], ['users.id'], name='approval_requests_requested_by_fkey'),
    sa.ForeignKeyConstraint(['workflow_id'], ['approval_workflows.id'], name='approval_requests_workflow_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='approval_requests_pkey')
    )
    op.create_table('tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('assigned_to_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('lead_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deal_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('contact_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('template_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assigned_to_id'], ['users.id'], name='tasks_assigned_to_id_fkey'),
    sa.ForeignKeyConstraint(['contact_id'], ['contacts.id'], name='tasks_contact_id_fkey'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name='tasks_created_by_id_fkey'),
    sa.ForeignKeyConstraint(['deal_id'], ['deals.id'], name='tasks_deal_id_fkey'),
    sa.ForeignKeyConstraint(['lead_id'], ['leads.id'], name='tasks_lead_id_fkey'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='tasks_organization_id_fkey'),
    sa.ForeignKeyConstraint(['template_id'], ['task_templates.id'], name='tasks_template_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='tasks_pkey')
    )
    op.create_table('nurturing_steps',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('campaign_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('step_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('step_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('step_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('delay_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('delay_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('step_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('trigger_conditions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['campaign_id'], ['lead_nurturing_campaigns.id'], name='nurturing_steps_campaign_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='nurturing_steps_pkey')
    )
    # ### end Alembic commands ###
